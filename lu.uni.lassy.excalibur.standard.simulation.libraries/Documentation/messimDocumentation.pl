:- multifile mandata/1.
mandata(messimPredicate):-
Themankey = 'addProtectedOperation(Type,Operation)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'addProtectedOperation\'',
Themainform = '\'addProtectedOperation(Type,Operation)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Type',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Operation',
['an operation name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'declares the operation \'Operation\' as a protected operation for the ',
'type \'Type\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'fails if Type or Operation is a variable term.',
'Protected operations are handled using the dynamic predicate protectedOperations/1.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- addProtectedOperation(dtOID,new).',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'allSubTypes(ASubTypeIN,ASuperTypesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'allSubTypes\'',
Themainform = '\'allSubTypes(ASubTypeIN, ASuperTypesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASubTypeIN',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASuperTypesList',
['a list of type names\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if ASuperTypesList is made of all the type names declared as super types ',
'for ASubTypeIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- allSubTypes(dtString,ASuperTypesList).',
'ASuperTypesList = [dtSMS,dtPhoneNumber,dtComment] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'boundOIDs(AClassInstanceList)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'boundOIDs\'',
Themainform = '\'boundOIDs(AClassInstanceList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AClassInstanceList',
['a list of typed values defined according to the Messim representation.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if for each value in AClassInstanceList that is an object ',
'(whose type is in the class types) then the oid fields can be bound to',
'a valid dtOID value.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'1) there might be several oid fields in case of hierarchy of class types.',
'2) AnOID is a valid dtOID value if it satisfies the predicate ',
'msrop(dtOID,new,[bound],AnOID).\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(ctAlert,new,[free],V), ',
'getField(V,[oid],OID),write(OID),write(\'\n\'),boundOIDs([V]),',
'getField(V,[oid],OID),write(OID).',
'',
'[dtOID,[],[[dtInteger,[[value,[ptInteger,_11216]]],[]]]]',
'[dtOID,[],[[dtInteger,[[value,[ptInteger,22]]],[]]]]',
'',
'V = [ctAlert,',
'[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,22]]],[]]]]],',
'[kind,[etHumanKind,witness]],',
'[id,[dtAlertID,[[value,[ptInteger,_11356]]],[]]],',
'[phoneNumber,[dtPhoneNumber,[],[[dtString,[[value,[ptString,_11393]]],[]]]]],',
'[comment,[dtComment,[],[[dtString,[[value,[ptString,_11430]]],[]]]]]],[]]',
'',
'OID = [dtOID,[],[[dtInteger,[[value,[ptInteger,22]]],[]]]] ? ',
'',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'buildFieldsPath(FieldName,AFieldsList,FirstLevelFields)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'buildFieldsPath\'',
Themainform = '\'buildFieldsPath(FieldName, AFieldsList, FirstLevelFields)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'FieldName',
['an atom\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldsList',
['a list of lists of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'FirstLevelFields',
['a list of a list of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if FirstLevelFields is a flat list starting by FieldName and followed by ',
'all the atoms in the lists of AFieldsList. \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'FirstLevelFields corresponds to a Messim field path.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- buildFieldsPath(comment, [[value]],P).',
'P = [[comment,value]] ? ',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'buildTypedValuesList(Freeness,ATypesList,AValuesList)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'buildTypedValuesList\'',
Themainform = '\'buildTypedValuesList(Freeness, ATypesList, AValuesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Freeness',
['indication of the way to create new typed values\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypesList',
['a list of types\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValuesList',
['A list of typed values\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValuesList is a list of values typed accordingly to the ',
'list of types existing in ATypesList and such that each value can ',
'be obtained using the new operation defined for its type following',
'the Freeness indicator.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Makes use of the Messim operation \'new\' for each type.',
'If Freeness contains values then they will be used for all types in the ATypesList and',
'No type checking is made for the provide values in the list w.r.t. the type definition.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'?- buildTypedValuesList([bound],[dtString,dtSMS],AValuesList).',
'AValuesList = ',
'[[dtString,[[value,[ptString,\'J3ev5tzsNd8YOm\']]],[]],',
' [dtSMS,[],[[dtString,[[value,[ptString,\'BId6mJENMvnk7yD\']]],[]]]]] ? ',
';',
'no',
'2)',
'?- buildTypedValuesList(Freeness,[dtString,dtSMS],AValuesList).',
'Freeness = [free],',
'AValuesList = ',
'[[dtString,[[value,[ptString,_A]]],[]],',
' [dtSMS,[],[[dtString,[[value,[ptString,_B]]],[]]]]] ? ;',
'no',
'3) ',
'?- buildTypedValuesList([\'hello world\'],[dtString,dtString],AValuesList).',
'AValuesList = ',
'[[dtString,[[value,[ptString,\'hello world\']]],[]],',
' [dtString,[[value,[ptString,\'hello world\']]],[]]] ? ;',
'no',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'checkFieldsTypes(AStructuredTypeValue,AStructuredTypeFieldPathList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'checkFieldsTypes\'',
Themainform = '\'checkFieldsTypes(AStructuredTypeValue, AStructuredTypeFieldPathList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AStructuredTypeValue',
['a typed value Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if for each path of AStructuredTypeFieldPathList then ',
'when accessing the field in AStructuredTypeValue using the path ',
'then the value returned is structurally of the type returned.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'to check the type it uses the predicate isTypeOf.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(dtSMS,new,[bound],V), checkFieldsTypes(V,[[value]]).',
'V = ',
'[dtSMS,[],[[dtString,[[value,[ptString,\'4sG5Y8Dp1CvIazc3Wj\']]],[]]]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'checkUpperLevelsTypes(AStructuredTypeValue,SuperTypesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'checkUpperLevelsTypes\'',
Themainform = '\'checkUpperLevelsTypes(AStructuredTypeValue, SuperTypesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AStructuredTypeValue',
['a typed value Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'SuperTypesList',
['A list of type names\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AStructuredTypeValue is a subtype of each type in SuperTypesList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'for each super type of SuperTypesList, AStructuredTypeValue is generalyzed ',
'and the corresponding value should be of the correct type.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(dtSMS,new,[bound],V), checkUpperLevelsTypes(V,[dtString]).',
'V = [dtSMS,[],[[dtString,[[value,[ptString,\'5WL3DTK6\']]],[]]]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'containsVariables(VariableList)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'containsVariables\'',
Themainform = '\'containsVariables(VariableList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'VariableList',
['a list of variables\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'true if VariableList contains at least one Prolog variable term.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'createFixedLevelValues(AdtDef,ValuesList,AFixedLevelValuesList,ANewValuesList)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'createFixedLevelValues\'',
Themainform = '\'createFixedLevelValues(AdtDef, ValuesList, AFixedLevelValuesList, ANewValuesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AdtDef',
['a list of couples [AFieldName,AFieldType] made of a field name and a field type name.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ValuesList',
['a list of typed values.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFixedLevelValuesList',
['a list of created typed values.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ANewValuesList',
['the list of typed values of ValuesList not used.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AFixedLevelValuesList is a list of couples [AFieldName,AValueOUT] ',
'for each couple [AFieldName,AFieldType] of AdtDef such that AValueOUT is a value ',
'of type AFieldType created using the msrop predicate with the fields values',
'of ValuesList and such that if not all values are consumed then ANewValuesList',
'contains the remaining values.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'- uses msrop(AFieldType,create,ValuesList,AValueOUT).',
'- needs to compute the number of fields at each recursion step using ',
'fieldsNumber(AFieldType,ATmpFieldsNumber) such that if ATmpFieldsNumber is equal to 0 it means',
'that it is primitive type. This is why, in this case, the number of consumed values must be one.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'createFixedLevelValues([[name,dtString],[state,ctState],[actor,ctMsrActor]],',
'[1,2,3,4,5,6,7,8,9],L,P).',
'L = ',
'[[name,[dtString,[[value,[ptString,1]]],[]]],',
' [state,[ctState,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,2]]],[]]]]],',
'                  [nextValueForAlertID,[ptInteger,3]],',
'                  [vpStarted,[ptBoolean,4]]],[]]],',
' [actor,[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,5]]],[]]]]]],[]]]],',
'P = [6,7,8,9] ? ',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'extractFields(ATypedValueIN,AFieldNamesList,AFieldsValuesListOUT)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'extractFields\'',
Themainform = '\'extractFields(ATypedValueIN, AFieldNamesList, AFieldsValuesListOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedValueIN',
['a typed value Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldNamesList',
['a list of lists of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldsValuesListOUT',
['a list of typed value Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AFieldsValuesListOUT is a list of all the typed values for each',
'of the fields whose path is in AFieldNamesList and such that the value ',
'corresponds to the one extracted from ATypedValueIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ?- extractFields([dtInteger,[[value,[ptInteger,34275]]],[]],',
'[value],L).',
'L = [dtInteger,[[value,[ptInteger,34275]]],[]] ? ',
'yes',
'',
'2) ?- msrop(ctAlert,new,[bound],V),write(V),',
'extractFields(V,[[id,value]],L).',
'',
'[ctAlert,',
'[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,44771]]],[]]]]],',
'[kind,[etHumanKind,anonym]],',
'[id,[dtAlertID,[[value,[ptInteger,64743]]],[]]],',
'[phoneNumber,[dtPhoneNumber,[],[[dtString,[[value,[ptString,F]]],[]]]]],',
'[comment,[dtComment,[],[[dtString,[[value,[ptString,XBhNdCGWmwqfLclKMEOSjTb]]],[]]]]]],[]]',
'',
'L = [[ptInteger,64743]] ?',
'yes',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'fieldsNumber(ATypeName,AFieldsNumber)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'fieldsNumber\'',
Themainform = '\'fieldsNumber(ATypeName,AFieldsNumber)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeName',
['An atom representing a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldsNumber',
['An integer representing a quantity of fields\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AFieldsNumber is the number of fields of ATypeName. If ATypeName',
'is a primitive type identifier then AFieldsNumber should be 0. If ATypeName',
'is a data type or a class type, AFieldsNumber should be equal to the number',
'of declared fields including the supertypes fields and the oid fields.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'there is no verification that ATypeName corresponds to an existing type',
'of the abstract machine for the current system.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'1) ',
'?- fieldsNumber(notATypeName,N).',
'N = 0 ? ',
'yes',
'2) ',
'?- fieldsNumber(ptInteger,N).',
'N = 0 ? ',
'yes',
'3)',
'?- findall([T,N],fieldsNumber(T,N),L),samsort(L,SL),write(SL).',
'[[ctAlert,5],',
'[actComCompany,2],',
'[inactComCompany,2],',
'[outactComCompany,2],',
'[ctInputInterface,1],[ctMsrActor,1],',
'[actMsrCreator,2],',
'[inactMsrCreator,2],',
'[outactMsrCreator,2],',
'[ctOutputInterface,1],',
'[ctState,3],',
'[dtAlertID,1],',
'[dtComment,1],',
'[dtInteger,1],',
'[dtString,1],',
'[dtOID,1],',
'[dtPhoneNumber,1],',
'[dtSMS,1],',
'[rtRelDefPart,5]]',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'fieldsNumberCurrentLevelList(CurrentLevelList,P)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'fieldsNumberCurrentLevelList\'',
Themainform = '\'fieldsNumberCurrentLevelList(CurrentLevelList,P)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'CurrentLevelList',
['a list of couples made of a field name and a field type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'P',
['a natural number\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if P equals the number of all the fields that are declared ',
'in the type definition for all the types of CurrentLevelList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'remember that the predicate fieldsNumber(FieldType,Q) is true when Q is 0 and',
'FieldType a primitive type, thus we increment by 1. \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- fieldsNumberCurrentLevelList([[_,ctAlert],[phone,dtPhoneNumber]],P).',
'P = 6 ? ',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'fieldsNumberUpperLevelsList(SuperTypesList,P)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'fieldsNumberUpperLevelsList\'',
Themainform = '\'fieldsNumberUpperLevelsList(SuperTypesList,P)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'SuperTypesList',
['a list of type names.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'P',
['a natural number\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if P equals the number of all the fields that are declared ',
'in the type definition for all the types of SuperTypesList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- fieldsNumberUpperLevelsList([ctMsrActor,dtString],P).',
'P = 2 ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'freecopy(ValuesList,NewValuesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'freecopy\'',
Themainform = '\'freecopy(ValuesList, NewValuesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ValuesList',
['a list of typed values defined according to the Messim representation \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'NewValuesList',
['a list of typed values defined according to the Messim representation \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if NewValuesList is equal to ValuesList in which each object value ',
'has its oid field being a variable.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'an object might be at inner level in a typed value.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(ctMsrActor,new,[bound],O1),msrop(ctMsrActor,new,[bound],O2),',
'freecopy([O1,O2],L),write([O1,O2]),write(L).',
'',
'O1 = [[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,51321]]],[]]]]]],[]],',
'O2 = [ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,18004]]],[]]]]]],[]]]',
'',
'L = [',
'[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,_15354]]],[]]]]]],[]],',
'[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,_15791]]],[]]]]]],[]]',
']',
'',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'generalize(ATypedValueIN,AGeneralizedTypeIDIN,AGeneralizedTypeIDValueOUT)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'generalize\'',
Themainform = '\'generalize(ATypedValueIN, AGeneralizedTypeIDIN, AGeneralizedTypeIDValueOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedValueIN',
['a data type value using the Messim data type value representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AGeneralizedTypeIDIN',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AGeneralizedTypeIDValueOUT',
['a data type value using the Messim data type value representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AGeneralizedTypeIDValueOUT is the Messim data type value representation',
'of type ATypedValueIN such that this value is of type AGeneralizedTypeIDIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'It is supposed that ATypedValueIN is a subtype of AGeneralizedTypeIDIN.',
'The generalization of a typed value to its own type as supertype is considered ',
'true when the generalized value is the same as the initial typed value. ',
'This property could be argued against but it is a convention for the Messim engine. ',
'The generalization of an empty type (no attribute at all) to itself is false.',
'In case of multiple inheritance trees in which the same type appears as a super type, ',
'then the generalization is true for the first declared supertype value in the list.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- generalize(',
'     [dtSMS,[],[[dtString,[[value,[ptString,rtKIewj3]]],[]]]],',
'     dtString,',
'     Value).',
'Value = [dtString,[[value,[ptString,rtKIewj3]]],[]] ?',
'yes',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'generateVarList(Length,VariablesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'generateVarList\'',
Themainform = '\'generateVarList(Length,VariablesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Length',
['a bound natural number\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'VariablesList',
['A free variable\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if VariablesList is a list containing \'Length\' variables identifiers.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'\'-\' is used to recursively build the list of variable',
'thus reusing the Prolog variable handling mechanism.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'?- generateVarList(3,VariablesList).',
'VariablesList = [_A,_B,_C] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getAssociationName(AType,ARoleNameAtom,AnAssociationName)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getAssociationName\'',
Themainform = '\'getAssociationName(AType, ARoleNameAtom, AnAssociationName)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AType',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ARoleNameAtom',
['a role name for an association\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnAssociationName',
['a name of an existing association in the Messir concept model.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if there exist a unique association having AnAssociationName for name',
'and such that it has an end having for role name ARoleNameAtom and another end',
'having AType for related type.',
'type at this end.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- getAssociationName(inactComCompany,rnActor,X).',
'X = rtactComCompanyinactComCompany ? ',
'or,',
'| ?- getAssociationName(ctAlert,rnSystem,Z).',
'Z = rtctStatectAlert ? ',
'or since there is only one association with rnctAlert as role name,',
'| ?- getAssociationName(X,rnctAlert,Z).',
'Z = rtctStatectAlert ? ',
'or since there are many association having a part end with rnActor as role name,',
'we would have:',
'| ?- getAssociationName(X,rnActor,Z).',
'no',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getField(ATypedDataIN,AfieldPathIN,AFieldValueOUT)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getField\'',
Themainform = '\'getField(ATypedDataIN, AfieldPathIN, AFieldValueOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedDataIN',
['a typed value defined according to the Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AfieldPathIN',
['a list representing a path expression.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldValueOUT',
['a typed value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if a AFieldValueOUT is equal to the typed value for the field ',
'accessible following the path AfieldPathIN in the definition of ATypedDataIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'ATypedDataIN and AfieldPathIN cannot be variables.',
'the predicate is called recursively based on the field path definition and the value ATypedDataIN',
'definition. \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'msrop(dtSMS,new,[bound],V),getField(V, [value], AFieldValueOUT).',
'',
'V = [dtSMS,[],[[dtString,[[value,[ptString,\'Gk51bgnodVeQWmBU\']]],[]]]],',
'AFieldValueOUT = [ptString,\'Gk51bgnodVeQWmBU\'] ? ',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getFieldsListFromTypeDef(ATypeNameIN,AFieldsListOUT)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getFieldsListFromTypeDef\'',
Themainform = '\'getFieldsListFromTypeDef(ATypeNameIN, AFieldsListOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeNameIN',
['an atom\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldsListOUT',
['a list of lists of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AFieldsListOUT is the flattened list of all fields paths',
'for each field defined in the definition of the type ATypeNameIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'The flattened list of fields names should be correspond to their declaration order.',
'A field path is a complete list of fields names that is built according to the ',
'type hierarchy until the leaf.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ?- getFieldsListFromTypeDef(ctAlert,List).',
'List = ',
'[[oid,value],',
'[kind],',
'[id,value],',
'[phoneNumber,value],',
'[comment,value]] ? ',
'yes',
'2) ? - getFieldsListFromTypeDef(dtSMS,List).',
'List = [[value]] ? ',
'yes',
'3) ?- getFieldsListFromTypeDef(actComCompany,List).',
'List = [[oid,value],[oid,value]] ? ',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getFirstLevelFields(AFieldsDef,FirstLevelFields)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getFirstLevelFields\'',
Themainform = '\'getFirstLevelFields(AFieldsDef , FirstLevelFields)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFieldsDef',
['a list of lists of two atoms [FieldName, FieldType].\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'FirstLevelFields',
['a list of lists of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if FirstLevelFields is the flattened list of all fields paths',
'for each field provided in the list AFieldsDef according to its declared type.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'The flattened list of fields names should be correspond to their declaration order.',
'A field path is a complete list of fields names that is built according to the ',
'type hierarchy until the leaf.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'?- getFirstLevelFields([[phone , dtPhoneNumber]],L).',
'L = [[phone,value]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getNextObjectID(CPT)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getNextObjectID\'',
Themainform = '\'getNextObjectID(CPT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'CPT',
['a free variable\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if CPT is bound to an integer equal to the successor of the one',
'satisfying the nextObjectID predicate and if the dynamic nextObjectID',
'is redefined to be satisfied with only CPT.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- getNextObjectID(CPT).',
'CPT = 14 ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getObjects(_,_)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getObjects\'',
Themainform = '\'getObjects(ObjectsIDList,AnObjectsValuesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ObjectsIDList',
['a list of object identifiers of type dtOID.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnObjectsValuesList',
['a list of object values.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AnObjectsValuesList corresponds to all the instances',
'values in the current Messam version for each object whose',
'identifier is in ObjectsIDList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'It can be the case that the list of objects are of ',
'different types.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getType(ATypedValueIN,ATypeNameOUT)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getType\'',
Themainform = '\'getType(ATypedValueIN, ATypeNameOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedValueIN',
['a bound typed value Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeNameOUT',
['an atom\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if ATypeNameOUT is the atom indicating the type of ',
'the value ATypedValueIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'ATypedValueIN can be a data type or a class type expression.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- getType([dtInteger,[[value,[ptInteger,34275]]],[]],Type).',
'Type = dtInteger ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'getUpperLevelsFields(SuperTypesList,UpperLevelFields)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'getUpperLevelsFields\'',
Themainform = '\'getUpperLevelsFields(SuperTypesList , UpperLevelFields)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'SuperTypesList',
['a list atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'UpperLevelFields',
['a list of lists of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if UpperLevelFields is the flattened list of all fields paths',
'for each field of each type provided in the list SuperTypesList according ',
'to its type definition.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- getUpperLevelsFields([dtString] , UpperLevelFields).',
'UpperLevelFields = [[value]] ? ',
'',
'? getUpperLevelsFields([ctAlert] , UpperLevelFields).',
'UpperLevelFields = ',
'[[oid,value],[kind],[id,value],[phoneNumber,value],[comment,value]] ? ',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'inherit(SubType,SuperTypesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'inherit\'',
Themainform = '\'inherit(SubType,SuperTypesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'SubType',
['an atom\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'SuperTypesList',
['a list of atoms\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if the dynamic predicate subTypes is updated with a ',
'value containing all the previous subTypes elements plus the new one',
'as a list [SubType,SuperTypesList].\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'is is supposed that SubType was not already known as a ',
'subtype (i.e. not in the existing list). ',
'It is supposed that this predicate will not be called with a super types ',
'list containing the value \'SubType\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have to ask for satisfying :',
':-inherit(dtComment,[dtString]).',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'inheritBehavior(AType,ASubTypeList,AnOperationName)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'inheritBehavior\'',
Themainform = '\'inheritBehavior(AType, ASubTypeList, AnOperationName)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AType',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASubTypeList',
['a list of type names as subtypes of AType \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnOperationName',
['an operation name \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'for each subtype in ASubTypeList if the operation AnOperationName ',
'is not already declared for this subtype (thus having already a corresponding msrop associated predicate)',
'then a msrop predicate declaration for this operation is generated to the ',
'output file for consultation such that this predicate is a redirection to the ',
'super type msrop predicate for operation AnOperationName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have ',
'inheritBehavior(dtString, [dtSMS,dtPhoneNumber,dtComment], length).',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'inheritedBehaviorsInitialization',
Thearity = '0',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'inheritedBehaviorsInitialization\'',
Themainform = '\'inheritedBehaviorsInitialization\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'this Messam initialization predicate is dynamically creating all the necessary ',
'predicates for complementing the msrop predicates for all operations that should be ',
'inherited from a super type for its subtype.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'A temporary file is used to write the predicates definitions and consult it.',
'Uses the inheritAllBehaviors predicate.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initDynamicPredicate(Predicate,Dimension)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initDynamicPredicate\'',
Themainform = '\'initDynamicPredicate(Predicate,Dimension)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Predicate',
['a name of a predicate\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Dimension',
['a natural number\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'declares at resolution time a new dynamic predicate \'Predicate\' having ',
'\'Dimension\' as arity. The declaration is twice, one for the Prolog engine ',
'and one for the specific knowledge base handled by the Messir simulator. \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Uses a temporary file to dynamically write the declarations to be consulted by',
' the Prolog engine.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'we would have:',
'?- allDynamicPredicates(L), write(L).',
'L = [',
'[commentData,2],[commentHeader,2],',
'[evolution,1],[protectedOperations,1],',
'[operations,1],[outputEvents,1],',
'[inputEvents,1],[interfaceTypes,1],',
'[actorTypes,1],[classTypes,1],',
'[subTypes,1],[relationTypes,1],',
'[dataTypes,1],[enumerationTypes,1],',
'[primitiveTypes,1],[messam,4],',
'[lastMessamVersion,1],[currentMessamVersion,1],',
'[nextObjectID,1]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeGenericAllOperations',
Thearity = '0',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeGenericAllOperations\'',
Themainform = '\'initializeGenericAllOperations\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'used for automatic declaration of init and destroy operations',
'for the the types: ctMsrActor,ctInputInterface,ctOutputInterface.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'uses the file path associated to the key \'tmp2FilePath\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeGenericOperations(ASuperType,AnOperation)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeGenericOperations\'',
Themainform = '\'initializeGenericOperations(ASuperType,AnOperation)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASuperType',
['a name of a class type.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnOperation',
['an operation name that must be either \'init\' or \'destroy\'.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'for each subtype of ASuperType an init or destroy operation ',
'is dynamically declared as associated to the subtype that reuse the',
'supertype corresponding operation.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'(TBC) only subtypes having no attribute are considered.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.+',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeMsrActorRelations(ActorTypeName,ActorRoleName)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeMsrActorRelations\'',
Themainform = '\'initializeMsrActorRelations(ActorTypeName, ActorRoleName)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActorTypeName',
['the name of the actor class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActorRoleName',
['a name for the actor role name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'a new association is declared between the actor type ActorTypeName and the ',
'ctState class since all actors are composing the system\'s environment.',
'Thus the association is a composition with ctState as composite with \'rnSystem\'',
'as role name and the actor ActorTypeName as part with the given ActorRoleName',
'as role name and (1,*) as cardinality.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the association name is automatically generated using the ActorTypeName',
'and \'rtctState\' as atoms.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeMsrInterfaceRelations(ActorTypeName,InterfaceType,InterfaceName)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeMsrInterfaceRelations\'',
Themainform = '\'initializeMsrInterfaceRelations(ActorTypeName, InterfaceType, InterfaceName)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActorTypeName',
['the name of the actor class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'InterfaceType',
['either ctOutputInterface or ctInputInterface\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'InterfaceName',
['the type name of the interface\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'a new association is declared between the actor type ActorTypeName and its ',
'interface of type InterfaceType. The association end cardinalities are (1,1).',
'The role names are \'rnActor\' and \'rnInterfaceIN\' or \'rnInterfaceOUT\' depending',
'on the type of the interface.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the association name is automatically generated using the ActorTypeName',
'and InterfaceName as atoms.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeOperation(init,ActType)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeOperation\'',
Themainform = '\'initializeOperation(init,ActType)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'init',
['the bound name of the operation to initialize\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActType',
['a class type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'generate in the current stream the Prolog code necessary to ensure the',
'existence at interpretation time of an init operation for the type ActType.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'This init operation is declared using the generic predicate msrop for the type',
'ActType by creating a free object of this type and then binding it and ',
'adding it to the abstract machine state using the msmop predicate with msrIsNew.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\':-newOperation(ctExampleClass,init,[[],[ctExampleClass]]).',
'',
'msrop(ctExampleClass,init,[],ThectType):-',
'msrop(ctExampleClass,new,[free],ThectType),!,',
'msmop(msrIsNew,ThectType,[]).',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'initializeOperations(Operation,TypesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'initializeOperations\'',
Themainform = '\'initializeOperations(_Operation,TypesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Operation',
['the name of the operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'TypesList',
['a list of type names\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if the predicate initializeOperation(Operation,ActType) is true ',
'for all ActType member of TypesList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'isProtectedOperation(Type,Operation)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'isProtectedOperation\'',
Themainform = '\'isProtectedOperation(Type,Operation)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Type',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Operation',
['an operation name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if the operation \'Operation\' is in the list of protected operation for the ',
'type \'Type\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'fails if Type or Operation is a variable term.',
'Protected operations are handled using the dynamic predicate protectedOperations/1.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- isProtectedOperation(dtOID,new).',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'isSubType(ASubTypeIN,ASuperTypeIN)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'isSubType\'',
Themainform = '\'isSubType(ASubTypeIN, ASuperTypeIN)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASubTypeIN',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASuperTypeIN',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if either ASubTypeIN has been declared as a direct or ',
'indirect sub type of ASuperTypeIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- isSubType(dtSMS,dtString).',
'yes',
'or',
'?- isSubType(X,dtString).',
'X = dtSMS ? ;',
'X = dtPhoneNumber ? ;',
'X = dtComment ? ;',
'no',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'isTypeOf(ATypeName,ATypedValue)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'isTypeOf\'',
Themainform = '\'isTypeOf(ATypeName,ATypedValue)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeName',
['a bound name of a type.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedValue',
['a bound typed value.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if ATypedValue respects the type definition of ATypeName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'?- msrop(dtSMS,new,[bound],ASMS),isTypeOf(dtSMS,ASMS).',
' ASMS = [dtSMS,[],',
' [[dtString,[[value,[ptString,pN3MuF9xRgfeCPtw6sTlSXEmYVkZO]]],[]]]] ?',
' \'yes\'',
' ',
'?- msrop(dtSMS,new,[free],ASMS),isTypeOf(dtSMS,ASMS).',
' \'no\'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'man(Atom)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'08_Documentation.pl\'',
Thepredicate = '\'man\'',
Themainform = '\'man(Atom)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Atom',
['An atom expression that represents a key entry of the documention.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'display the documention available on the Atom.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'in case there exist several documention entries',
'having Atom as a sub-atom, then a list of those entries',
'is displayed and the correct entry is asked to be entered.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrNav(Source,Path,Target)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrNav\'',
Themainform = '\'msrNav(Source,Path,Target)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Source',
['a list of typed value defined according to the Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Path',
['a list representing a navigation path.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Target',
['a list of typed value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if Target is the list of all typed values that can be reached by navigating ',
'from Source until the end of the navigation path Path.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'1) For each value in the list Source, it is collected the values reachable at navigation path end.',
'2) the msrNav predicate is split in 9 axioms. ',
'- axiom 01: navigating from a source along an empty path reaches the source.',
'- axiom 02: if Source is an object and Path is a list made of an output name followed by ',
'the list of parameters for this event then msrNav is true if Result is the value satisfying ',
'the msrSim predicate applied to the object value for its outputEvent belonging to its output',
'interface. (In addition the listing of the Messim abstract machine together with the ',
'evolution histories listing are produced.',
'- axiom 03: \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrSolve(consistentMessamExpansion,_,_)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrSolve\'',
Themainform = '\'msrSolve(consistentMessamExpansion,[Dimension,ATypeName],AValuesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'[Dimension,ATypeName]\'',
['']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'A dimension for the abstract machine (i.e. classes or relations',
['with a type name belonging to this dimension.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValuesList',
['a list of values of type ATypeName.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'adds to the Messam abstract machine all the values given in AValuesList',
'in the correct dimension determined by [Dimension,ATypeName]. This expansion',
'is made consistently w.r.t. composition associations with the sate class in',
'case of class instances.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'N.A.',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrVar(AType,AFreeTypedValue)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrVar\'',
Themainform = '\'msrVar(AType,AFreeTypedValue)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AType',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AFreeTypedValue',
['a typed value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AFreeTypedValue is a typed value having a Prolog variable ',
'term for each of its attribute.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'not supposed to be called with AType not being a variable term.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1)',
'?- msrVar(dtString,AFreeTypedValue).',
'AFreeTypedValue = [dtString,[[value,[ptString,_A]]],[]] ? ',
'yes',
'2)',
'?- msrVar(dtString,[dtString,[[value,[ptString,_A]]],[]]).',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(ATypeName,new,ParametersList,AValue)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(ATypeName,new,ParametersList,AValue)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeName',
['a name of a declared data type or class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'new',
['the constant name of the messam operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ParametersList',
['a list of parameters to be used for the value creation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValue',
['the newly created value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValue is a list expression of type ATypeName that is built accordingly',
'to the Messim typed value representation (c.f. Messim chapter) and such that',
'to each field of ATypeName, a value is substituted taken from ParametersList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Makes use of the Messim operation \'create\' (cf. msrop(ATypeName,create,ParametersList,AValue)).',
'Fails is the new operation is declared as a protected operation for the type ATypeName.',
'The list of parameters is either free or must contain enough values that will be consumed ',
'accordingly to the orders induced recursively by the attributes list and the supertypes lists',
'No type checking is made for the provide values in the list w.r.t. primitive types definitions.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'?- msrop(dtString,new,[hello],AValue).',
'AValue = [dtString,[[value,[ptString,hello]]],[]] ? ',
'yes',
'2)',
'?- msrop(dtPhoneNumber,new,[\'+3524666445251\'],AValue).',
'AValue = [dtPhoneNumber,[],[[dtString,[[value,[ptString,\'+3524666445251\']]],[]]]] ? ',
'3) In this example, notice the length of the values list and the non type checking for the boolean value.',
'?- msrop(ctState,new,[1,11,111,false],AValue).',
'AValue = ',
'[ctState,',
'[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,1]]],[]]]]],',
'[nextValueForAlertID,[ptInteger,11]],',
'[vpStarted,[ptBoolean,111]]],[]]',
'4) in this example, we show that having a free parameters list is equivalent to [free]:',
'?- msrop(dtString,new,_,AValue).',
'AValue = [dtString,[[value,[ptString,_A]]],[]] ? ',
'yes',
'?- msrop(dtString,new,[free],AValue).',
'AValue = [dtString,[[value,[ptString,_A]]],[]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(ATypeName,new,bound,AValue)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(ATypeName,new,[bound],AValue)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeName',
['a name of a declared data type or class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'new',
['the constant name of the messam operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'[bound]',
['an indicator for the kind of new operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValue',
['the newly created value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValue is a list expression of type ATypeName that is built accordingly',
'to the Messim typed value representation (c.f. Messim chapter) and such that',
'a automatically synthesized bound value is provided for each field of ATypeName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'make use of the Messim operation \'create\' (cf. msrop(ATypeName,create,_,AValue)).',
'Fails is the new operation is declared as a protected operation for the type ATypeName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'?- msrop(dtString,new,[bound],AValue).',
'AValue = [dtString,[[value,[ptString,\'O5\']]],[]] ? ',
'yes',
'2)',
'?- msrop(dtSMS,new,[bound],AValue).',
'AValue = [dtSMS,[],[[dtString,[[value,[ptString,\'4sG5Y8Dp1CvIazc3Wj\']]],[]]]] ? ',
'3)',
'?- msrop(ctState,new,[bound],AValue), write(AValue).',
'AValue = ',
'[ctState,',
' [[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,-8592]]],[]]]]],',
'  [nextValueForAlertID,[ptInteger,4993]],',
'  [vpStarted,[ptBoolean,true]]],[]]',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(ATypeName,new,free,AValue)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(ATypeName,new,[free],AValue)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypeName',
['a name of a declared data type or class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'new',
['the constant name of the messam operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'[free]',
['an indicator for the kind of new operation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValue',
['the newly created value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValue is a list expression of type ATypeName that is built accordingly',
'to the Messim typed value representation (c.f. Messim chapter) and such that',
'a Prolog variable identifier is provided for each field of ATypeName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'make use of the Messim operation \'create\' (cf. msrop(ATypeName,create,VariablesList,AValue)).\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'?- msrop(dtString,new,[free],AValue).',
'AValue = [dtString,[[value,[ptString,_A]]],[]] ? ',
'yes',
'2)',
'?- msrop(dtSMS,new,[free],AValue), write(AValue).',
'AValue = [dtSMS,[],[[dtString,[[value,[ptString,_A]]],[]]]] ? ',
'yes',
'3)',
'?- msrop(ctState,new,[free],AValue).',
'AValue = ',
'[ctState,',
'[[oid,[dtOID,[],',
'[[dtInteger,[[value,[ptInteger,_A]]],[]]]]],',
' [nextValueForAlertID,[ptInteger,_B]],',
' [vpStarted,[ptBoolean,_C]]],[]]',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(AdtName,create,ValuesList,AValueOUT)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(AdtName,create,ValuesList,AValueOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AdtName',
['a bound name of a declared data type or class type.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'create',
['the name of the Messir operation for creating an enumerated type value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ValuesList',
['a list of parameters to be used for the value creation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValueOUT',
['the newly created value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValue is a list expression of type AdtName that is built accordingly',
'to the Messim typed value representation (c.f. Messim chapter). The Prolog list structure',
'is recursively build by creating (using the \'msrop\' predicate for creation) a typed value ',
'for each of the defined fields. The recursion follows the field hierarchy declared in the type definition',
'(i.e. level zero typed fields specific to the type AdtName and fields belonging ',
'to the declared list of supertypes).\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'both class types and data types use the same Prolog representation and thus share ',
'the same axiomatization for the creation of a value of their type. ',
'the bound property of AdtName is not checked.',
'ValuesList must either be a free variable or should contain more values than the number of fields',
'that can be deduced from the definition of AdtName. This list is consumed using a left deep first',
'approach to associate to the fields.',
'No type checking is made for the provide values in the list w.r.t. primitive types definitions.',
'\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'msrop(dtSecuredSMS,create,[key,aCryptedMessageValue],AValueOUT).',
'AValueOUT = ',
'[dtSecuredSMS,',
'[[key,[dtString,[[value,[ptString,key]]],[]]]],',
'[[dtSMS,[],[[dtString,[[value,[ptString,aCryptedMessageValue]]],[]]]]]] ? ',
'yes',
'2) In this example, notice the length of the values list and the non type checking for the boolean value.',
'?- msrop(ctState,create,[1,11,111,false],AValue).',
'AValue = ',
'[ctState,',
'[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,1]]],[]]]]],',
'[nextValueForAlertID,[ptInteger,11]],',
'[vpStarted,[ptBoolean,111]]],[]]',
'3) in this example, we show that having a variable as parameters list is equivalent to',
'create a new value with randomly selected bound values:',
'?- msrop(dtString,create,_,AValue).',
'AValue = [dtString,[[value,[ptString,iVFyEnzKt0labkQOJRMXHSefw]]],[]] ? ',
'yes',
'?- msrop(ctState,create,_,AValue), write(AValue).',
'AValue = ',
'[ctState,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,-21174]]],[]]]]],',
'[nextValueForAlertID,[ptInteger,-95836]],',
'[vpStarted,[ptBoolean,true]]],[]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(AetName,create,ValuesList,AValueOUT)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(AetName,create,ValuesList,AValueOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AetName',
['a bounded name of a declared enumeration type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'create',
['the name of the Messir operation for creating an enumerated type value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ValuesList',
['a list of parameters to be used for the value creation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValueOUT',
['the newly created value\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if AValue is a list expression of type AetName that is built accordingly',
'to the Messim typed value representation (c.f. Messim chapter) and such that',
'to the enumerated value belongs to the declared enumeration.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the bound property of AetName is not checked.',
'if ValuesList is an empty list then a free value is returned.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'1) ',
'?- msrop(etHumanKind,create,ValuesList,AValueOUT).',
'AValueOUT = [etHumanKind,anonym] ? ',
'yes',
'2)',
'?- msrop(etHumanKind,create,[victim],AValueOUT).',
'AValueOUT = [etHumanKind,victim] ? ',
'yes',
'3) ',
'?- msrop(etHumanKind,create,[valuenotchecked],AValueOUT).',
'no',
'4) msrop(AetName,create,[],AValueOUT).',
'AetName = etHumanKind,',
'AValueOUT = [etHumanKind,_A] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'msrop(_,AnInputEvent,_,_)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'msrop\'',
Themainform = '\'msrop(_ActInputInterface,AnInputEvent,Parameters,[])\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnInputEvent',
['a name of an event that must be in the list of input',
'events declared with the actors input interfaces.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'Parameters',
['a list of the form [InterfaceIN | EventParametersList] where',
'InterfaceIN is an instance of the input interface of the class that',
'must contain an event named AnInputEvent.',
'EventParametersList must be a list of typed values consistent',
'w.r.t. the declared profile of the input event of the actor that',
'is supposed to receive the event sent through his input interface.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'declares a msrop predicate instance for message sending to',
'external actors that reuse the msrSent predicate with the',
'correct parameters InterfaceIN,AnInputEvent and EventParametersList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the iCrashMini example we would have:',
'InterfaceIN = ',
' [inactComCompany,',
'    [[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,11]]],[]]]]]],',
'    [[ctInputInterface,[[oid,[dtOID,[],',
'      [[dtInteger,[[value,[ptInteger,10]]],[]]]]]],[]]]]',
'AnInputEvent = ieSmsSend',
'EventParametersList =',
'  [[dtPhoneNumber,[],',
'    [[dtString,[[value,[ptString,+33660688877]]],[]]]],',
'   [dtSMS,[],',
'    [[dtString,[[value,[ptString,Alert registered]]],[]]]]]',
']])',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newActor(ActorName,RoleName,AttributesList)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newActor\'',
Themainform = '\'newActor(ActorName,RoleName,AttributesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActorName',
['the name for the actor class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'RoleName',
['the name for the role of the actor in its association with the ctState class.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AttributesList',
['the list of attribute names and types for the actor\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'predicate used to create the class type for the actor ActorName ',
'as a subtype of ctMsrActor using the newType predicate, ',
'to ensure that this new type is in the list of actor types and',
'to initialize the composite association that must exist with the ',
'ctState class.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'AttributesList is expected to be the empty list ',
'(see the semantics chapter for details).\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the contexte of the iCrashMini case study we would have:',
'newActor(actComCompany,rnactComCompany,[])',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newAssociation(AssociationType,AssociationName,PartsList)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newAssociation\'',
Themainform = '\'newAssociation(AssociationType, AssociationName, PartsList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AssociationType',
['a bound term representing the type of association (see Messir book)\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AssociationName',
['an atom defining the name for the association\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'PartsList',
['a bound term representing the list of all association parts definition as values of type \'rtRelDefPart\'.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'adds a new relation type in list of relation types satisfying the dynamic ',
'predicate \'relationTypes\'. The new value added is a tuple made of the AssociationType,',
'the AssociationName, a list of all the associated class type name for each association end',
'and the parts definition list PartsDefinitions.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'If AssociationName is a variable at satisfaction time then is it unified with the concatenation ',
'of all the atoms made of the part class names and role names.',
'PartsList should not be a variable or an empty list.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
':- newAssociation(',
'    association,',
'    VAR,',
'    [ [ctAlert,rnctAlert,associate,\'0\',\'*\'],',
'      [actComCompany,rnactComCompany,associate,\'1\',\'1\']',
'    ]).',
'VAR = rtctAlertrnctAlertactComCompanyrnactComCompany',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newAssociationParts(AssociationType,AssociationName,PartsList,PartsDefinitionOUT)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newAssociationParts\'',
Themainform = '\'newAssociationParts(AssociationType, AssociationName, PartsList, PartsDefinitionOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AssociationType',
['an atom indicating the type of association \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AssociationName',
['an atom indicating the name of the association\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'PartsList',
['A list of parts definition made of elements of form ',
'[ClasseName, RoleName, RoleType, CardMin, CardMax].\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'PartsDefinitionOUT',
['a list of elements of type \'rtRelDefPart\' \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if PartsDefinitionOUT is a list made of typed elements of type \'rtRelDefPart\' ',
'built using Messim typed element creation using the values given for each element of ',
'PartsList.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Association types are: association, composition, aggregation.',
'It is a sub predicate used in the newAssociation predicate.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'newAssociationParts( ',
'association, ',
'rtctAlertrnctAlertactComCompanyrnactComCompany, ',
'[[ctAlert,rnctAlert,associate,\'0\',*], ',
' [actComCompany,rnactComCompany,associate,\'1\',\'1\']],X).',
'',
'X = ',
'[[rtRelDefPart,',
'   [[partEnd,[ptString,ctAlert]],',
'   [roleName,[ptString,rnctAlert]],',
'   [roleType,[ptString,associate]],',
'   [cardMin,[ptString,\'0\']],',
'   [cardMax,[ptString,*]]],[]],',
' [rtRelDefPart,',
'   [[partEnd,',
'    [ptString,actComCompany]],',
'    [roleName,[ptString,rnactComCompany]],',
'    [roleType,[ptString,associate]],',
'    [cardMin,[ptString,\'1\']],',
'    [cardMax,[ptString,\'1\']]],[]]] ',
'yes',
'',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newEvents(_,_)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newEvents\'',
Themainform = '\'newEvents(AnEventCategory,[AClassType,AnEventName,ASignature])\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnEventCategory',
['must be either inputEvents or outputEvents.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AClassType',
['the name of an input or output interface class.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnEventName',
['the event name.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AClassType',
['the name of an input or output interface class.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASignature',
['a list made of a list of parameters names and types and',
'a list containing the type of the returned parameter if any.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if, a there exist a new class operation associated to',
'the event name AnEventName for the class AClassType.',
'the new list of events for the category Category contains the event ',
'whose profile is indicated in the predicate\'s parameters.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'existing events are the ones in the only list that satisfies',
'the dynamic unary predicate \'outputEvents(EventsList) or',
'inputEvents(EventsList).\' depending of the event category.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'newEvents(outputEvents,',
'       [ outactMsrCreator,',
'         oeCreateSystemAndEnvironment,',
'        [ [[qtyComCompanies,ptInteger]],',
'          []]])',
'   ',
'  a call to satisfy outputEvents(L) will get',
'  L = [[outactMsrCreator,',
'       oeCreateSystemAndEnvironment,',
'       [[[qtyComCompanies,ptInteger]],[]]]',
'     ]',
'     ',
'newEvents(outputEvents,[outactComCompany,',
'                           oeAlert,',
'                           [ [[kind,dtHumanKind],',
'                              [aPhoneNumber,dtPhoneNumber],',
'                              [aComment,dtComment]],',
'                           []]',
'                       ]).',
'    ]]).',
'',
'newEvents(inputEvents, [inactComCompany,',
'                           ieSmsSend,',
'                           [ [[aPhoneNumber,dtPhoneNumber],',
'                              [aSMS,dtSMS]],',
'                             []]',
'                        ]).',
'    ]]).',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newInterface(ActorName,InterfaceType,InterfaceName)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newInterface\'',
Themainform = '\'newInterface(ActorName,InterfaceType,InterfaceName)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ActorName',
['the name for the actor class type\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'InterfaceType',
['either ctOutputInterface or ctInputInterface\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'InterfaceName',
['the name of the class type for the interface\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'predicate used to create the class type for the actor interface ',
'as a subtype of InterfaceType using the newType predicate, ',
'to ensure that this new type is in the list of interface types and',
'to initialize the association that must exist between the actor type ',
'ActorName and the interface InterfaceName.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of the iCrashMini case study we would have:',
'newInterface(',
'    actComCompany,',
'    ctOutputInterface,',
'    outactComCompany).',
'and',
'newInterface(',
'    actComCompany,',
'    ctInputInterface,',
'    inactComCompany)',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newOperation(AType,AnOperationName,AParametersList)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newOperation\'',
Themainform = '\'newOperation(AType,AnOperationName, AParametersList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AType',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnOperationName',
['an operation name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AParametersList',
['a list if parameter\'s types\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'declares a new operation AnOperationName associated to the type AType and having',
'AParametersList as parameters signature.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the dynamic predicate that is used to store the declared operations is \'operations/1\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have operation(List) true with a list that',
'would contain, as an illustration, the following operations:',
'[ctAlert,init,[[dtAlertID,dtPhoneNumber,dtComment],[ctAlert]]]',
'[actComCompany,init,[[],[actComCompany]]]',
'[inactComCompany,ieSmsSend,[[[aPhoneNumber,dtPhoneNumber],[aSMS,dtSMS]],[]]]',
'[inactComCompany,init,[[],[inactComCompany]]]',
'[outactComCompany,init,[[],[outactComCompany]]]',
'[outactComCompany,oeAlert,[[[kind,dtHumanKind],[aPhoneNumber,dtPhoneNumber],[aComment,dtComment]],[]]]',
'[actMsrCreator,init,[[],[actMsrCreator]]]',
'[inactMsrCreator,init,[[],[inactMsrCreator]]]',
'[outactMsrCreator,init,[[],[outactMsrCreator]]]',
'[outactMsrCreator,oeCreateSystemAndEnvironment,[[[qtyComCompanies,ptInteger]],[]]]',
'[ctState,init,[[ptInteger,ptBoolean],[ctState]]]',
'[dtComment,is,[[dtComment],[]]]',
'[dtInteger,eq,[[dtInteger,dtInteger],[]]]',
'[dtInteger,geq,[[dtInteger,dtInteger],[]]]',
'[dtInteger,leq,[[dtInteger,dtInteger],[]]]',
'[dtString,length,[[dtString],[ptInteger]]]',
'[dtString,myStringConcat,[[dtString,dtString],[dtString]]]',
'[dtOID,is,[[dtOID],[]]]',
'[dtPhoneNumber,is,[[dtPhoneNumber],[]]]',
'[ptInteger,add,[[ptInteger,ptInteger],[ptInteger]]]',
'[ptInteger,eq,[[ptInteger,ptInteger],[]]]',
'[ptInteger,geq,[[ptInteger,ptInteger],[]]]',
'[ptInteger,leq,[[ptInteger,ptInteger],[]]]',
'[ptInteger,toptReal,[[ptInteger,ptInteger],[ptReal]]]',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newStateClass(ClassDef)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newStateClass\'',
Themainform = '\'newStateClass(ClassDef)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ClassDef',
['a parameters definition list\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'declares a new class type ctState with ',
'ClassDef as attributes definition. ',
'The state class which is a special class since its name ',
'must not be free to be defined (i.e. it must be ctState), ',
'we thus use a specific Prolog predicate instead of ',
'using directly the newType predicate. ',
'Furthermore we cannot use the newSystemClass predicate since ',
'there cannot be an aggregation relation in between ctState and itself.',
'The attributes list is provided in terms of couples made ',
'of an attribute name and an attribute type.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'   newStateClass([ [nextValueForAlertID,ptInteger],',
'                   [vpStarted,ptBoolean]',
'                 ]).\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newSystemClass(ClassName,ClassDef,PartRoleName,PartRoleCardinality)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newSystemClass\'',
Themainform = '\'newSystemClass(ClassName, ClassDef, [PartRoleName, PartRoleCardinality])\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ClassName',
['the name of the class type for a new system state type.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ClassDef',
['a list of attribute names with their types.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'PartRoleName',
['the role name for class as part of the composition association ',
'with the ctState class.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'PartRoleCardinality',
['the cardinality for the composition end.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'a new system state type ClassName is introduced with attributes',
'defined in ClassDef. A new composition association is defined ',
'between ctState and ClassName such that the part end as',
'PartRoleName for role name and PartRoleCardinality for cardinality.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the name of the association is automatically generated using the ',
'names of the associated classes.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'newSystemClass(ctAlert,[ [kind,etHumanKind],',
'                            [id,dtAlertID],',
'                            [phoneNumber,dtPhoneNumber],',
'                            [comment,dtComment]',
'                          ],',
'                  [rnctAlert,[\'0\',\'*\']]).\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newType(TypeSetIdentifier,NewTypeDefinition)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newType\'',
Themainform = '\'newType(TypeSetIdentifier,NewTypeDefinition)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'TypeSetIdentifier',
['a category of types\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'NewTypeDefinition',
['a definition of all the primary fields made of a field name and a field type name.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'for each category of types handled by Messim, there exist ',
'two predicates: one that contains the list of all types definition',
'and one that declares the type names of this category',
'together with its definition. Thus this predicate is true if its ',
'satisfaction those two lists knowing the category \'TypeSetIdentifier\'',
'and the definition\'NewTypeDefinition\'.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Makes use of newTypePartitioned predicate.',
'If the category is \'classTypes\' thus the oid field is added to the given ',
'type definition.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- allTypesDefinition(L),samsort(L,NL),simpleListListing(NL).',
'[classTypes,[ctAlert,[[oid,dtOID],[kind,etHumanKind],[id,dtAlertID],[phoneNumber,dtPhoneNumber],[comment,dtComment]]]]',
'[classTypes,[actComCompany,[[oid,dtOID]]]]',
'...',
'[classTypes,[ctOutputInterface,[[oid,dtOID]]]]',
'[classTypes,[ctState,[[oid,dtOID],[nextValueForAlertID,ptInteger],[vpStarted,ptBoolean]]]]',
'[dataTypes,[dtAlertID,[[value,ptInteger]]]]',
'[dataTypes,[dtComment,[]]]',
'...',
'[dataTypes,[rtRelDefPart,[[partEnd,ptString],[roleName,ptString],',
'[roleType,ptString],[cardMin,ptString],[cardMax,ptString]]]]',
'[enumerationTypes,[etHumanKind,[witness,victim,anonym]]]',
'[primitiveTypes,[ptBoolean,[]]]',
'[primitiveTypes,[ptInteger,[]]]',
'[primitiveTypes,[ptReal,[]]]',
'[primitiveTypes,[ptString,[]]]',
'[relationTypes,[composition,rtctStatectAlert,[[ctState,rnSystem],[ctAlert,rnctAlert]],',
'[[rtRelDefPart,[[partEnd,[ptString,ctState]],[roleName,[ptString,rnSystem]],',
'[roleType,[ptString,composite]],[cardMin,[ptString,1]],',
'[cardMax,[ptString,1]]],[]],[rtRelDefPart,[[partEnd,[ptString,ctAlert]],',
'[roleName,[ptString,rnctAlert]],[roleType,[ptString,part]],[cardMin,[ptString,0]],',
'[cardMax,[ptString,*]]],[]]]]]',
'... ? ',
'',
'newAssociationParts(AssociationType, AssociationName, PartsList, PartsDefinitionOUT)\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'newTypePartitioned(TypeSetIdentifier,NewTypeDefinition)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'newTypePartitioned\'',
Themainform = '\'newTypePartitioned(TypeSetIdentifier, NewTypeDefinition)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'TypeSetIdentifier',
['a category of types\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'NewTypeDefinition',
['a definition of all the primary fields made of a field name and a field type name.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'for each category of types handled by Messim, there exist ',
'a predicate that declares the type names of this category',
'together with its definition. Thus this predicate is true if its ',
'satisfaction changes the list of types of category \'TypeSetIdentifier\'',
'by adding \'NewTypeDefinition\' to the existing list of types.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'Messim categories of types are: interfaceTypes,actorTypes,',
'classTypes,subTypes,relationTypes,dataTypes,',
'enumerationTypes and primitiveTypes.',
'The newTypePartitioned predicate is asked for resolution by the newType predicate.',
'A type definition does not included the fields of the declared supertypes.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have the following lists resulting',
'from the resolution of newTypePartitioned:',
'1)',
'?- classTypes(L).',
'L would be a list containing:',
'[inactComCompany,[[oid,dtOID]]],',
'[ctAlert,[[oid,dtOID],[kind,etHumanKind], [id,dtAlertID], [phoneNumber,dtPhoneNumber], [comment,dtComment]]],',
'[ctState,[[oid,dtOID],[nextValueForAlertID,ptInteger],[vpStarted,ptBoolean]]]',
'2) ?- dataTypes(L).',
'L would be a list containing:',
'[dtPhoneNumber,[]],',
'[dtComment,[]],',
'[dtAlertID,[[value,ptInteger]]],',
'[dtString,[[value,ptString]]],',
'[dtOID,[]]',
'3) ?- actorTypes(L).',
'L = [[actMsrCreator,[[oid,dtOID]]],[actComCompany,[[oid,dtOID]]]] ? ',
'yes',
'\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'resetOIDs(ObjectsList,NewObjectsList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'resetOIDs\'',
Themainform = '\'resetOIDs(ObjectsList, NewObjectsList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ObjectsList',
['a list of value of a class type defined according to the Messim representation \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'NewObjectsList',
['a list of value of a class type defined according to the Messim representation \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if NewObjectsList is equal to ObjectsList except that each oid field of ',
'each object value in NewObjectsList have their value defined according the ',
'nextObjectID predicate (i.e. the first object of the list has its value satisfying ',
'the predicate, the successive ones have their oid value that incrementally follow the ',
'first one.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'the dynamic predicate nextObjectID is redefined using the last used value for the ',
'NewObjectsList objects.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'1) In the context of iCrashMini we would have:',
'',
'?- msrop(ctAlert,new,[bound],V),resetOIDs([V],L),write(V),write(L).',
'',
'[ctAlert,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,84336]]],[]]]]],',
'[kind,[etHumanKind,witness]],',
'[id,[dtAlertID,[[value,[ptInteger,34275]]],[]]],',
'[phoneNumber,[dtPhoneNumber,[],[[dtString,[[value,[ptString,J3ev5tzsNd8YOm]]],[]]]]],',
'[comment,[dtComment,[],[[dtString,[[value,[ptString,BId6mJENMvnk7yD]]],[]]]]]],[]]',
'',
'[[ctAlert,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,17]]],[]]]]],',
'[kind,[etHumanKind,witness]],',
'[id,[dtAlertID,[[value,[ptInteger,34275]]],[]]],',
'[phoneNumber,[dtPhoneNumber,[],[[dtString,[[value,[ptString,J3ev5tzsNd8YOm]]],[]]]]],',
'[comment,[dtComment,[],[[dtString,[[value,[ptString,BId6mJENMvnk7yD]]],[]]]]]],[]]]',
'',
'2) ?- msrop(ctMsrActor,new,[bound],O1),msrop(ctMsrActor,new,[bound],O2),',
'nextObjectID(OIDatPre),resetOIDs([O1,O2],L),write([O1,O2]),write(L), ',
'nextObjectID(OIDatPost).',
'',
'O1 = [ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,44030]]],[]]]]]],[]],',
'O2 = [ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,7708]]],[]]]]]],[]]]',
'',
'L = [',
'[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,24]]],[]]]]]],[]],',
'[ctMsrActor,[[oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,25]]],[]]]]]],[]]',
']',
'',
'OIDatPre = 23, ',
'OIDatPost = 25 ?',
'',
'yes\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'setField(ATypedDataIN,AfieldPathIN,AValueIN,ATypedDataOUT)',
Thearity = '4',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'setField\'',
Themainform = '\'setField(ATypedDataIN, AfieldPathIN, AValueIN, ATypedDataOUT)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedDataIN',
['a typed value defined according to the Messim representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AfieldPathIN',
['a list representing a path expression.\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AValueIN',
['a typed value \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ATypedDataOUT',
['a typed value \'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if a ATypedDataOUT is equal to ATypedDataIN in which the typed value for the field ',
'accessible following the path AfieldPathIN is equal to AValueIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'ATypedDataIN and AfieldPathIN cannot be variables.',
'the predicate is called recursively based on the field path definition and the value ATypedDataIN',
'definition. \'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(dtSMS,new,[bound],V),msrop(dtString,new,[bound],S),',
'write(V),write(S),setField(V, [value], S, ATypedDataOUT), write(ATypedDataOUT).',
'',
'V = [dtSMS,[],[[dtString,[[value,[ptString,hwisoCyfj]]],[]]]]',
'S = [dtString,[[value,[ptString,0OmAxdI7]]],[]]',
'ATypedDataOUT = [dtSMS,[],[[dtString,[[value,[dtString,[[value,[ptString,0OmAxdI7]]],[]]]],[]]]]',
' ? ',
'yes\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'substituteSuperTypeObject(AnObject,ASuperTypeObject,ASubstitutedObject)',
Thearity = '3',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'substituteSuperTypeObject\'',
Themainform = '\'substituteSuperTypeObject(AnObject, ASuperTypeObject, ASubstitutedObject)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'AnObject',
['a data type value using the Messim data type value representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASuperTypeObject',
['a data type value using the Messim data type value representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASubstitutedObject',
['a data type value using the Messim data type value representation\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if ASubstitutedObject is a value equal to AnObject in which all ',
'the objects of same type than the type of ASuperTypeObject have',
'been replaced by ASuperTypeObject.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'If AnObject and ASuperTypeObject are of same type than ASubstitutedObject ',
'must be equal to ASuperTypeObject.',
'In case AnObject is a multiple subtype of the same supertype that the type of ',
'ASuperTypeObject then all those super type objects are substituted. ',
'Nevertheless, this is currently not used in Messim.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- msrop(dtSMS,new,[bound],X), ',
'   msrop(dtString,new,[bound],Y),',
'   substituteSuperTypeObject(X,Y,Z).',
'X = [dtSMS,[],[[dtString,[[value,[ptString,rg]]],[]]]],',
'Y = [dtString,[[value,[ptString,pN3MuF9]]],[]],',
'Z = [dtSMS,[],[[dtString,[[value,[ptString,pN3MuF9]]],[]]]] ? ',
'yes\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'superTypes(ASubTypeIN,ASuperTypesList)',
Thearity = '2',
Theauthor = '\'NG\'',
Thedate = '\'[12,07,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'superTypes\'',
Themainform = '\'superTypes(ASubTypeIN, ASuperTypesList)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASubTypeIN',
['a type name\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'ASuperTypesList',
['a type names list\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'is true if ASuperTypesList is the list of types names declared as super types of ',
'ASubTypeIN.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'In case no supertypes have been declared this list should be the empty list.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have:',
'?- superTypes(dtPhoneNumber,ASuperTypesList).',
'ASuperTypesList = [dtString] ? ',
'yes\'',
'']]),

true.
mandata(messimPredicate):-
Themankey = 'theSystem(TheSystem)',
Thearity = '1',
Theauthor = '\'NG\'',
Thedate = '\'[12,04,03]\'',
Thefile = '\'02_msrMetaModel.pl\'',
Thepredicate = '\'theSystem\'',
Themainform = '\'theSystem(TheSystem)\'',
createComment(messimPredicate,[Theauthor,Thedate,Thefile,Thepredicate,Themankey,Thearity,Themainform]),
addCommentRecord(messimPredicate,[Themankey,'Parameter',
['\'TheSystem',
['A free variable\'',
'']]]),
addCommentRecord(messimPredicate,[Themankey,'Thedescription',
['\'Is true if TheSystem can be bound to the an object value that should be the only instance',
'of the class ctState in the state of the current version of the Messam abstract machine.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Thecomment',
['\'N.A.\'',
'']]),
addCommentRecord(messimPredicate,[Themankey,'Theexample',
['\'In the context of iCrashMini we would have after initialisation:',
'?- theSystem(TheSystem).',
'TheSystem = ',
'[ctState,',
' [ [oid,[dtOID,[],[[dtInteger,[[value,[ptInteger,1]]],[]]]]],',
'   [nextValueForAlertID,[ptInteger,1]],',
'   [vpStarted,[ptBoolean,true]]],[]] ? ',
'yes\'',
'']]),

true.
